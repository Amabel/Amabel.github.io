<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YuaNdiFuhuO</title>
    <link>https://amabel.github.io/</link>
    <description>Recent content on YuaNdiFuhuO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 Apr 2018 16:14:58 +0900</lastBuildDate>
    
	<atom:link href="https://amabel.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PAT 1049. 数列的片段和 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1049.-%E6%95%B0%E5%88%97%E7%9A%84%E7%89%87%E6%AE%B5%E5%92%8C-20/</link>
      <pubDate>Thu, 26 Apr 2018 16:14:58 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1049.-%E6%95%B0%E5%88%97%E7%9A%84%E7%89%87%E6%AE%B5%E5%92%8C-20/</guid>
      <description>&lt;p&gt;给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。&lt;/p&gt;

&lt;p&gt;给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1063. 计算谱半径 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1063.-%E8%AE%A1%E7%AE%97%E8%B0%B1%E5%8D%8A%E5%BE%84-20/</link>
      <pubDate>Thu, 26 Apr 2018 15:50:08 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1063.-%E8%AE%A1%E7%AE%97%E8%B0%B1%E5%8D%8A%E5%BE%84-20/</guid>
      <description>&lt;p&gt;在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 n 个复数空间的特征值 { a&lt;sub&gt;1&lt;/sub&gt; + b&lt;sub&gt;1&lt;/sub&gt;i, &amp;hellip;, a&lt;sub&gt;n&lt;/sub&gt;+b&lt;sub&gt;n&lt;/sub&gt;i }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。&lt;/p&gt;

&lt;p&gt;现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSpec_basic</title>
      <link>https://amabel.github.io/2018/04/rspec_basic/</link>
      <pubDate>Fri, 13 Apr 2018 21:57:16 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/rspec_basic/</guid>
      <description>&lt;p&gt;使用 RSpec 写测试模块
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails 5 学习笔记</title>
      <link>https://amabel.github.io/2018/04/rails-5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 13 Apr 2018 15:15:59 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/rails-5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;总之先写下来，等之后再整理
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails: jbuilder 的基础用法</title>
      <link>https://amabel.github.io/2018/04/rails-jbuilder-%E7%9A%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 13 Apr 2018 14:18:45 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/rails-jbuilder-%E7%9A%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;在 Rails 中会需要将数据以 json 的格式返回给用户，本文介绍了使用 jbuilder 构建 json 的方法。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老鸟程序员才知道的 40 个小技巧</title>
      <link>https://amabel.github.io/2018/04/%E8%80%81%E9%B8%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%89%8D%E7%9F%A5%E9%81%93%E7%9A%84-40-%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 09 Apr 2018 23:24:01 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/%E8%80%81%E9%B8%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%89%8D%E7%9F%A5%E9%81%93%E7%9A%84-40-%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;40 条真言，希望对进阶中的程序朋友有所帮助。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1037. 在霍格沃茨找零钱 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1037.-%E5%9C%A8%E9%9C%8D%E6%A0%BC%E6%B2%83%E8%8C%A8%E6%89%BE%E9%9B%B6%E9%92%B1-20/</link>
      <pubDate>Sat, 07 Apr 2018 13:05:56 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1037.-%E5%9C%A8%E9%9C%8D%E6%A0%BC%E6%B2%83%E8%8C%A8%E6%89%BE%E9%9B%B6%E9%92%B1-20/</guid>
      <description>&lt;p&gt;如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可 (Sickle) 兑一个加隆 (Galleon)，二十九个纳特 (Knut) 兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1081. 检查密码 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1081.-%E6%A3%80%E6%9F%A5%E5%AF%86%E7%A0%81-15/</link>
      <pubDate>Thu, 05 Apr 2018 15:56:44 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1081.-%E6%A3%80%E6%9F%A5%E5%AF%86%E7%A0%81-15/</guid>
      <description>&lt;p&gt;本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于 6 个字符组成，并且只能有英文字母、数字和小数点&lt;code&gt;.&lt;/code&gt;，还必须既有字母也有数字。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1041. 考试座位号 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1041.-%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7-15/</link>
      <pubDate>Thu, 05 Apr 2018 11:20:48 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1041.-%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7-15/</guid>
      <description>&lt;p&gt;每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1031. 查验身份证 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1031.-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81-15/</link>
      <pubDate>Wed, 04 Apr 2018 22:08:46 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1031.-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81-15/</guid>
      <description>&lt;p&gt;一个合法的身份证号码由 17 位地区、日期编号和顺序编号加 1 位校验码组成。校验码的计算规则如下：&lt;/p&gt;

&lt;p&gt;首先对前 17 位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对 11 取模得到值 Z；最后按照以下关系对应 Z 值与校验码 M 的值：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1036. 跟奥巴马一起编程 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1036.-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B-15/</link>
      <pubDate>Wed, 04 Apr 2018 21:41:16 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1036.-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B-15/</guid>
      <description>&lt;p&gt;美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1077. 互评成绩计算 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1077.-%E4%BA%92%E8%AF%84%E6%88%90%E7%BB%A9%E8%AE%A1%E7%AE%97-20/</link>
      <pubDate>Mon, 02 Apr 2018 20:37:18 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1077.-%E4%BA%92%E8%AF%84%E6%88%90%E7%BB%A9%E8%AE%A1%E7%AE%97-20/</guid>
      <description>&lt;p&gt;在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 G1；老师给这个组的评分记为 G2。该组得分为 (G1 + G2) / 2，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1076. Wifi 密码 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1076.-wifi-%E5%AF%86%E7%A0%81-15/</link>
      <pubDate>Mon, 02 Apr 2018 11:14:52 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1076.-wifi-%E5%AF%86%E7%A0%81-15/</guid>
      <description>&lt;p&gt;下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用wifi，又怕耽误亲们的学习，现将wifi密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。&lt;/p&gt;

&lt;p&gt;(照片自己百度)
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1026. 程序运行时间 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1026.-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4-15/</link>
      <pubDate>Mon, 02 Apr 2018 10:53:32 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1026.-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4-15/</guid>
      <description>&lt;p&gt;要获得一个 C 语言程序的运行时间，常用的方法是调用头文件&lt;code&gt;time.h&lt;/code&gt;，其中提供了&lt;code&gt;clock()&lt;/code&gt;函数，可以捕捉从程序开始运行到&lt;code&gt;clock()&lt;/code&gt;被调用时所耗费的时间。这个时间单位是 clock tick，即 “时钟打点”。同时还有一个常数&lt;code&gt;CLK_TCK&lt;/code&gt;，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用&lt;code&gt;clock()&lt;/code&gt;，获得一个时钟打点数 C1；在 f 执行完成后再调用&lt;code&gt;clock()&lt;/code&gt;，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2 - C1) 就是 f 运行所消耗的时钟打点数，再除以常数&lt;code&gt;CLK_TCK&lt;/code&gt;，就得到了以秒为单位的运行时间。&lt;/p&gt;

&lt;p&gt;这里不妨简单假设常数&lt;code&gt;CLK_TCK&lt;/code&gt;为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1016. 部分 A &#43; B (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1016.-%E9%83%A8%E5%88%86-a---b-15/</link>
      <pubDate>Mon, 02 Apr 2018 10:24:47 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1016.-%E9%83%A8%E5%88%86-a---b-15/</guid>
      <description>&lt;p&gt;正整数 A 的 “D&lt;sub&gt;A&lt;/sub&gt;（为 1 位整数）部分” 定义为由 A 中所有 D&lt;sub&gt;A&lt;/sub&gt; 组成的新整数 P&lt;sub&gt;A&lt;/sub&gt;。例如：给定 A = 3862767，D &lt;sub&gt;A&lt;/sub&gt; = 6，则 A 的 “6部分” P&lt;sub&gt;A&lt;/sub&gt;是 66，因为 A 中有 2 个 6。&lt;/p&gt;

&lt;p&gt;现给定 A、D&lt;sub&gt;A&lt;/sub&gt;、B、D&lt;sub&gt;B&lt;/sub&gt;，请编写程序计算 P&lt;sub&gt;A&lt;/sub&gt; + P&lt;sub&gt;B&lt;/sub&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1021. 个位数统计 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1021.-%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1-15/</link>
      <pubDate>Mon, 02 Apr 2018 10:05:18 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1021.-%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1-15/</guid>
      <description>&lt;p&gt;给定一个 k 位整数 N = d&lt;sub&gt;k-1&lt;/sub&gt;*10&lt;sup&gt;k-1&lt;/sup&gt; + &amp;hellip; + d&lt;sub&gt;1&lt;/sub&gt;*10&lt;sup&gt;1&lt;/sup&gt; + d&lt;sub&gt;0&lt;/sub&gt; (0 &amp;lt;= d&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= 9, i = 0, &amp;hellip;, k - 1, d&lt;sub&gt;k-1&lt;/sub&gt; &amp;gt; 0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1069. 微博转发抽奖 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1069.-%E5%BE%AE%E5%8D%9A%E8%BD%AC%E5%8F%91%E6%8A%BD%E5%A5%96-20/</link>
      <pubDate>Mon, 02 Apr 2018 00:18:26 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1069.-%E5%BE%AE%E5%8D%9A%E8%BD%AC%E5%8F%91%E6%8A%BD%E5%A5%96-20/</guid>
      <description>&lt;p&gt;小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1047. 编程团体赛 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1047.-%E7%BC%96%E7%A8%8B%E5%9B%A2%E4%BD%93%E8%B5%9B-20/</link>
      <pubDate>Sun, 01 Apr 2018 23:32:34 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1047.-%E7%BC%96%E7%A8%8B%E5%9B%A2%E4%BD%93%E8%B5%9B-20/</guid>
      <description>&lt;p&gt;编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。&lt;/p&gt;

&lt;p&gt;现给定所有队员的比赛成绩，请你编写程序找出冠军队。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1046. 划拳 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1046.-%E5%88%92%E6%8B%B3-15/</link>
      <pubDate>Sun, 01 Apr 2018 22:29:17 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1046.-%E5%88%92%E6%8B%B3-15/</guid>
      <description>&lt;p&gt;划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。&lt;/p&gt;

&lt;p&gt;下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1073. 多选题常见计分法 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1073.-%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95-20/</link>
      <pubDate>Sun, 01 Apr 2018 18:25:50 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1073.-%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95-20/</guid>
      <description>&lt;p&gt;批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1084. 外观数列 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1084.-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97-20/</link>
      <pubDate>Sun, 01 Apr 2018 16:49:05 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1084.-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97-20/</guid>
      <description>&lt;p&gt;外观数列是指具有以下特点的整数序列：&lt;/p&gt;

&lt;p&gt;d, d1, d111, d113, d11231, d112213111, &amp;hellip;
它从不等于 1 的数字 d 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 d，所以就是 d1；第 2 项是 1 个 d（对应 d1）和 1 个 1（对应 11），所以第 3 项就是 d111。又比如第 4 项是 d113，其描述就是 1 个 d，2 个 1，1 个 3，所以下一项就是 d11231。当然这个定义对 d = 1 也成立。本题要求你推算任意给定数字 d 的外观数列的第 N 项。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1082. 射击比赛 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1082.-%E5%B0%84%E5%87%BB%E6%AF%94%E8%B5%9B-20/</link>
      <pubDate>Sun, 01 Apr 2018 15:54:12 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1082.-%E5%B0%84%E5%87%BB%E6%AF%94%E8%B5%9B-20/</guid>
      <description>&lt;p&gt;本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1006. 换个格式输出整数 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1006.-%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0-15/</link>
      <pubDate>Sun, 01 Apr 2018 14:17:29 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1006.-%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0-15/</guid>
      <description>&lt;p&gt;让我们用字母 B 来表示 “百”、字母 S 表示 “十”，用 “12&amp;hellip;n” 来表示个位数字 n (&amp;lt; 10)，换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1002. 写出这个数 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1002.-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0-20/</link>
      <pubDate>Sun, 01 Apr 2018 13:40:12 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1002.-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0-20/</guid>
      <description>&lt;p&gt;读入一个自然数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java: 使用 Deque 模拟栈和队列</title>
      <link>https://amabel.github.io/2018/04/java-%E4%BD%BF%E7%94%A8-deque-%E6%A8%A1%E6%8B%9F%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 01 Apr 2018 11:40:32 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/java-%E4%BD%BF%E7%94%A8-deque-%E6%A8%A1%E6%8B%9F%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;在编程时很多时候需要用到栈和队列，自己编码实现比较麻烦。本文介绍如何用 JDK 自带的类来实现栈和队列。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1009. 说反话 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1009.-%E8%AF%B4%E5%8F%8D%E8%AF%9D-20/</link>
      <pubDate>Sun, 01 Apr 2018 11:33:43 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1009.-%E8%AF%B4%E5%8F%8D%E8%AF%9D-20/</guid>
      <description>&lt;p&gt;给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1023. 组个最小数 (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1023.-%E7%BB%84%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0-20/</link>
      <pubDate>Sun, 01 Apr 2018 10:29:45 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1023.-%E7%BB%84%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0-20/</guid>
      <description>&lt;p&gt;给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1061. 判断题 (15)</title>
      <link>https://amabel.github.io/2018/04/pat-1061.-%E5%88%A4%E6%96%AD%E9%A2%98-15/</link>
      <pubDate>Sun, 01 Apr 2018 09:39:31 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1061.-%E5%88%A4%E6%96%AD%E9%A2%98-15/</guid>
      <description>&lt;p&gt;判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1043. 输出PATest (20)</title>
      <link>https://amabel.github.io/2018/04/pat-1043.-%E8%BE%93%E5%87%BApatest-20/</link>
      <pubDate>Sun, 01 Apr 2018 09:23:19 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/04/pat-1043.-%E8%BE%93%E5%87%BApatest-20/</guid>
      <description>&lt;p&gt;给定一个长度不超过 10000 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 &amp;ldquo;PATestPATest&amp;hellip;.&amp;rdquo; 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1056. 组合数的和 (15)</title>
      <link>https://amabel.github.io/2018/03/pat-1056.-%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E5%92%8C-15/</link>
      <pubDate>Sat, 31 Mar 2018 22:53:35 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/pat-1056.-%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E5%92%8C-15/</guid>
      <description>&lt;p&gt;给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为 330。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1042. 字符统计 (20)</title>
      <link>https://amabel.github.io/2018/03/pat-1042.-%E5%AD%97%E7%AC%A6%E7%BB%9F%E8%AE%A1-20/</link>
      <pubDate>Sat, 31 Mar 2018 21:55:53 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/pat-1042.-%E5%AD%97%E7%AC%A6%E7%BB%9F%E8%AE%A1-20/</guid>
      <description>&lt;p&gt;请编写程序，找出一段给定文字中出现最频繁的那个英文字母。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1011. A &#43; B 和 C (20)</title>
      <link>https://amabel.github.io/2018/03/pat-1011.-a---b-%E5%92%8C-c-20/</link>
      <pubDate>Sat, 31 Mar 2018 11:07:16 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/pat-1011.-a---b-%E5%92%8C-c-20/</guid>
      <description>&lt;p&gt;给定区间 [-231, 231] 内的 3 个整数 A、B 和 C，请判断 A + B 是否大于 C。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1013. 数素数 (20)</title>
      <link>https://amabel.github.io/2018/03/pat-1013.-%E6%95%B0%E7%B4%A0%E6%95%B0-20/</link>
      <pubDate>Sat, 31 Mar 2018 10:37:08 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/pat-1013.-%E6%95%B0%E7%B4%A0%E6%95%B0-20/</guid>
      <description>&lt;p&gt;令 P&lt;sub&gt;i&lt;/sub&gt; 表示第 i 个素数。现任给两个正整数 M &amp;lt;= N &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;，请输出 P&lt;sub&gt;M&lt;/sub&gt; 到 P&lt;sub&gt;N&lt;/sub&gt; 的所有素数。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java: Scanner 的用法</title>
      <link>https://amabel.github.io/2018/03/java-scanner-%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 30 Mar 2018 23:10:20 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/java-scanner-%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;Java 从 1.5 开始添加了 Scanner 类。Scanner 类用于从控制台读取输入，在做 OJ 的题时掌握 Scanner 的用法很重要。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PAT 1004. 成绩排名 (20)</title>
      <link>https://amabel.github.io/2018/03/pat-1004.-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D-20/</link>
      <pubDate>Fri, 30 Mar 2018 22:32:26 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/pat-1004.-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D-20/</guid>
      <description>&lt;p&gt;读入 n 名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Mac 和 Python3 上安装 MeCab</title>
      <link>https://amabel.github.io/2018/03/%E5%9C%A8-mac-%E5%92%8C-python3-%E4%B8%8A%E5%AE%89%E8%A3%85-mecab/</link>
      <pubDate>Sun, 25 Mar 2018 21:35:22 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/%E5%9C%A8-mac-%E5%92%8C-python3-%E4%B8%8A%E5%AE%89%E8%A3%85-mecab/</guid>
      <description>&lt;p&gt;如何在 Mac 和 Python 上安装 MeCab。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 23. Merge k Sorted Lists</title>
      <link>https://amabel.github.io/2018/03/leetcode-23.-merge-k-sorted-lists/</link>
      <pubDate>Fri, 23 Mar 2018 22:34:48 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/leetcode-23.-merge-k-sorted-lists/</guid>
      <description>&lt;p&gt;Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 21. Merge Two Sorted Lists</title>
      <link>https://amabel.github.io/2018/03/leetcode-21.-merge-two-sorted-lists/</link>
      <pubDate>Fri, 23 Mar 2018 16:39:58 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/leetcode-21.-merge-two-sorted-lists/</guid>
      <description>&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo: 在 Github 上部署 blog</title>
      <link>https://amabel.github.io/2018/03/hugo-%E5%9C%A8-github-%E4%B8%8A%E9%83%A8%E7%BD%B2-blog/</link>
      <pubDate>Wed, 21 Mar 2018 00:15:10 +0900</pubDate>
      
      <guid>https://amabel.github.io/2018/03/hugo-%E5%9C%A8-github-%E4%B8%8A%E9%83%A8%E7%BD%B2-blog/</guid>
      <description>&lt;p&gt;介绍怎么把 Hugo 项目关联到 GitHub 和怎么把 生成的静态网页托管到 github.io 上&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 2. Add Two Numbers</title>
      <link>https://amabel.github.io/2017/06/leetcode-2.-add-two-numbers/</link>
      <pubDate>Sun, 18 Jun 2017 22:13:34 +0900</pubDate>
      
      <guid>https://amabel.github.io/2017/06/leetcode-2.-add-two-numbers/</guid>
      <description>&lt;p&gt;You are given two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 3. Longest Substring without Repeating Characters</title>
      <link>https://amabel.github.io/2017/06/leetcode-3.-longest-substring-without-repeating-characters/</link>
      <pubDate>Mon, 12 Jun 2017 18:32:57 +0900</pubDate>
      
      <guid>https://amabel.github.io/2017/06/leetcode-3.-longest-substring-without-repeating-characters/</guid>
      <description>&lt;p&gt;Given a string, find the &lt;strong&gt;length&lt;/strong&gt; of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>